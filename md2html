#!/usr/bin/env perl
use strict;
use warnings;

use Getopt::Long;
use Pod::Usage;
use Text::Markdown 'markdown';

our $VERSION = "1.04444";
undef $/; # slurp mode


my $css_file = '';
my $nocss = 0;
my $force = 0;
my $stdout = 0;
my $man = 0;
my $help = 0;

GetOptions(
    'css=s' => \$css_file, 
    'nocss' => \$nocss, 
    'force' => \$force,
    'stdout' => \$stdout,
    'help|?' => \$help,
    'man' => \$man,
) or pod2usage(2);

pod2usage(1) if $help;
pod2usage(-verbose => 2) if $man;

my $html_begin = <<'HTMLBEGIN';
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<style>
HTMLBEGIN


my $html_middle = <<'HTMLMIDDLE';
</style>
</head>
<body>
HTMLMIDDLE

my $html_end = <<'HTMLEND';
</body>
</html>


HTMLEND

my $css_data;
if ($nocss) {
    $css_data = '';
} elsif ($css_file and -e $css_file) {
    open (my $cssf, "<", $css_file)
        or die "Can't open CSS file '$css_file' : $!";
    $css_data = <$cssf>; # slurp mode enable with 'undef $/' before
    close($cssf);
} else {
    $css_data = <<'DEFAULTCSS';
@charset "utf-8";

/**
 * markdown.css
 *
 * This program is free software: you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation, either version 3 of the License, or (at your option) any
 * later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program. If not, see http://gnu.org/licenses/lgpl.txt.
 *
 * @project      Weblog and Open Source Projects of Florian Wolters
 * @version      GIT: $Id$
 * @package      xhtml-css
 * @author       Florian Wolters <florian.wolters.85@googlemail.com>
 * @copyright    2012 Florian Wolters
 * @cssdoc       version 1.0-pre
 * @license      http://gnu.org/licenses/lgpl.txt GNU Lesser General Public License
 * @link         http://github.com/FlorianWolters/jekyll-bootstrap-theme
 * @media        all
 * @valid        true
 */

body {
    font-family: Helvetica, Arial, Freesans, clean, sans-serif;
padding:1em;
margin:auto;
max-width:42em;
background:#fefefe;
}

h1, h2, h3, h4, h5, h6 {
    font-weight: bold;
}

h1 {
    color: #000000;
    font-size: 28px;
}

h2 {
    border-bottom: 1px solid #CCCCCC;
    color: #000000;
    font-size: 24px;
}

h3 {
    font-size: 18px;
}

h4 {
    font-size: 16px;
}

h5 {
    font-size: 14px;
}

h6 {
    color: #777777;
    background-color: inherit;
    font-size: 14px;
}

hr {
    height: 0.2em;
    border: 0;
    color: #CCCCCC;
    background-color: #CCCCCC;
}

p, blockquote, ul, ol, dl, li, table, pre {
    margin: 15px 0;
}

code, pre {
    border-radius: 3px;
    background-color: #F8F8F8;
    color: inherit;
}

code {
    border: 1px solid #EAEAEA;
    margin: 0 2px;
    padding: 0 5px;
}

pre {
    border: 1px solid #CCCCCC;
    line-height: 1.25em;
    overflow: auto;
    padding: 6px 10px;
}

pre > code {
    border: 0;
    margin: 0;
    padding: 0;
}

a, a:visited {
    color: #4183C4;
    background-color: inherit;
    text-decoration: none;
}


DEFAULTCSS

}

while (<>) {
    # slurp mode enable with 'undef $/' before (see line 9)

    my $write_file = ($stdout!=1 and $ARGV ne '-');
    my $fhout;
    
    if ($write_file) {
        my $html_file = $ARGV.'.html';
        if (-e $html_file and $force!=1) {
            warn "'$html_file' already exists (skip). Use '--force' or '--stdout'\n";
            next;
        }
        open($fhout,">",$html_file)
            or die "Can't open HTML file '$ARGV.html' : $!";
        select $fhout;
    }
    print $html_begin, $css_data x !$nocss, $html_middle, markdown($_), $html_end ;
    close($fhout) if ($write_file) ;
}

__END__

=pod

=head1 NAME

md2html - convert markdown file to html file 

=head1 SYNOPSIS

md2html [options] [<mdfile1> [<mdfile2> ...]]

 Options:
   -h --help            brief help message
   -m --man             full documentation
   -c --css=<cssfile>   use a specific CSS file
   -n --nocss           don't use defaut CSS file
   -s --stdout          use STDOUT instead of creating a new file
   -f --force           write HTML file, even if it already exists


=head1 DESCRIPTION

md2html converts markdown files and produces new HTML files using
a defaut CSS style, appending F<.html> to each filename (with same
path).
 

=head1 OPTIONS

=over 4

=item B<--help>

Print a brief help message.

C<md2html --help>

=item B<--man>

Print the manual page.

C<md2html --man>

=item B<--css E<lt>cssfileE<gt>>

Use a specific CSS file.

C<md2html --css mycssfile.css path-to/myfile.md myfile2.md>

=item B<--nocss>

Use a specific CSS file.

C<md2html --nocss *.markdown>

=item B<--stdout>

Don't create HTML file. Write to STDOUT.

C<md2html --stdout myfile.md>

To create HTML file in another folder:

C<< md2html --stdout path/myfile.md > other-path/myname.html >>


=item B<--force>

Don't skip markdown file when HTML file already exists.

C<md2html --force myfile.md> write F<myfile.md.html>
even if it exists.

=item STDIN

md2html can read STDIN. If so, it writes to STDOUT.

C<cat somefile | md2html --nocss>

C<< cat somefile | md2html --css mycss.css > myfile.html >>

=back

=cut

